# Importation des bibliothèques nécessaires
import pygame
import sys
import random




# Classe de base pour gérer les animaux (Poissons et Requins)
class Animaux:
    def __init__(self, tableau, image, x, y):
        self.tableau = tableau  # La référence au tableau où l'animal évolue
        self.image = pygame.transform.scale(image, (40, 40))  # L'image de l'animal (redimensionnée)
        self.x = x  # Coordonnée x de l'animal (position initiale)
        self.y = y  # Coordonnée y de l'animal (position initiale)

    def deplacer(self):
        # Obtient le prochain déplacement à partir du générateur de déplacement
        dx, dy = next(self.tableau.deplacement)
        # Gestion du rebouclage lorsque l'animal atteint les bords
        self.x = (self.x + dx) % self.tableau.largeur
        self.y = (self.y + dy) % self.tableau.hauteur





# Classe pour gérer les poissons (hérite de la classe Animaux)
class Poisson(Animaux):
    def __init__(self, tableau, image, x, y):
        super().__init__(tableau, image, x, y)  # Initialise la classe parente

# Classe pour gérer les requins (hérite de la classe Animaux)
class Requin(Animaux):
    def __init__(self, tableau, image, x, y):
        super().__init__(tableau, image, x, y)  # Initialise la classe parente







# Classe pour gérer le tableau du jeu
class Tableau:
    def __init__(self, largeur, hauteur, taille_case):
        self.largeur = largeur  # Largeur de la fenêtre en pixels
        self.hauteur = hauteur  # Hauteur de la fenêtre en pixels
        self.taille_case = taille_case  # Taille d'une case en pixels
        self.fenetre = pygame.display.set_mode((largeur, hauteur))  # Crée la fenêtre du jeu
        pygame.display.set_caption("Déplacement et reproduction d'animaux")  # Définit le titre de la fenêtre
        self.animaux = []  # Liste pour stocker les animaux (Poissons et Requins)
        self.deplacement = self.deplacement_aleatoire()  # Initialise le générateur de déplacement aléatoire
        self.delai = 500  # Durée du délai entre les mouvements en millisecondes

    # Générateur de déplacement aléatoire
    def deplacement_aleatoire(self):
        while True:
        # La variable "directions" contient les quatre choix possibles pour les déplacements :
        # - Se déplacer d'une taille de case vers la droite (dx=self.taille_case, dy=0)
        # - Se déplacer d'une taille de case vers la gauche (dx=-self.taille_case, dy=0)
        # - Se déplacer d'une taille de case vers le haut (dx=0, dy=self.taille_case)
        # - Se déplacer d'une taille de case vers le bas (dx=0, dy=-self.taille_case)

        # Ensuite, on utilise la fonction "random.choice" pour choisir aléatoirement l'une de ces directions

            directions = [(self.taille_case, 0), (-self.taille_case, 0), (0, self.taille_case), (0, -self.taille_case)]
            dx, dy = random.choice(directions)
            yield dx, dy
        #  Enfin, on "yield" les valeurs de dx et dy, ce qui les renvoie comme résultats du générateur.




    # Vérifie si une case est vide
    def case_est_vide(self, x, y):
        for animal in self.animaux:
            if animal.x == x and animal.y == y:
                return False
        return True

    # Affiche le tableau et les animaux
    def afficher(self):
        self.fenetre.fill((255, 255, 255))  # Remplit la fenêtre avec une couleur de fond (blanc)
        for i in range(0, self.largeur, self.taille_case):
            for j in range(0, self.hauteur, self.taille_case):
                pygame.draw.rect(self.fenetre, (0, 0, 0), (i, j, self.taille_case, self.taille_case), 1)
                # Dessine un rectangle (case) avec des contours noirs

        for animal in self.animaux:
            animal.deplacer()  # Appelle la méthode deplacer() de chaque animal pour les déplacer
            self.fenetre.blit(animal.image, (animal.x, animal.y))  # Affiche l'image de chaque animal à sa position actuelle

        pygame.display.flip()  # Met à jour l'affichage
        pygame.time.delay(self.delai)  # Ajoute un délai entre les mouvements







# Fonction principale du jeu
def main():
    pygame.init()  # Initialise Pygame

    largeur, hauteur, taille_case = 400, 400, 50  # Dimensions du tableau et taille des cases
    tableau = Tableau(largeur, hauteur, taille_case)  # Crée le tableau du jeu
    image_poisson = pygame.image.load("img/poisson (1).png")  # Charge l'image du poisson
    image_requin = pygame.image.load("img/12624.png")  # Charge l'image du requin

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        if random.random() < 0.1:  # Crée un poisson avec 10% de chance
            x, y = 50, 50  # Position initiale du poisson
            poisson = Poisson(tableau, image_poisson, x, y)  # Crée un nouveau poisson
            tableau.animaux.append(poisson)  # Ajoute le poisson à la liste d'animaux

        if random.random() < 0.05:  # Crée un requin avec 5% de chance
            x, y = 50, 50  # Position initiale du requin
            requin = Requin(tableau, image_requin, x, y)  # Crée un nouveau requin
            tableau.animaux.append(requin)  # Ajoute le requin à la liste d'animaux

        tableau.afficher()  # Affiche le tableau

if __name__ == "__main__":
    main()

